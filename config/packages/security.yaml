security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
        App\Entity\User:
            algorithm: bcrypt 
    providers:
        users:
            entity: 
                class: 'App\Entity\Users'
                property: 'userEmail'
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        admin:
            lazy: true
            provider: users
            logout:
                path: app_logout
            pattern: ^/administracion/
            custom_authenticator:
                - App\Security\AdminAuthAuthenticator
        main:
            lazy: true
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 1296000
            provider: users
            logout:
                path: app_logout
            custom_authenticator:
                - App\Security\UsersAuthAuthenticator
        


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/users/login, roles: PUBLIC_ACCESS }
        - { path: ^/users/control_panel, roles: ROLE_USER }
        - { path: ^/users/post_review, roles: ROLE_USER }
        - { path: ^/cart, roles: ROLE_USER }
        - { path: ^/administracion/login, roles: PUBLIC_ACCESS }
        - { path: ^/administracion, roles: ROLE_ADMIN}
        
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
